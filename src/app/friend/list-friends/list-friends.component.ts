import { Component } from '@angular/core';
import { OneFriendComponent } from '../one-friend/one-friend.component';
import { NgIf } from '@angular/common';
import { CommonModule } from '@angular/common';

/* NgIf
En reprenant la base de l'exo pr√©cedent 
Nous allons g√©rer le rendu conditionnel de la phrase 
de base on a une phrase qui dit "aucun Ami"
si on rempli l'input et que l'on click sur le bouton 
cela affiche une autre phrase 'ami ajout√©' en reprenant le contenu de l'input */

@Component({
  selector: 'app-list-friends',
  imports: [OneFriendComponent, NgIf],
  templateUrl: './list-friends.component.html',
  styleUrl: './list-friends.component.css'
})

/**
 * Composant repr√©sentant la liste des amis.
 */
export class ListFriendsComponent {
  /**
   * Indique si la r√©putation est activ√©e.
   * Initialement √† false, elle passe √† true apr√®s 3 secondes.
   *
   * @type {boolean}
   */
  reputation: boolean = false;
  /**
   * Texte dynamique li√© √† l'input utilisateur.
   *
   * @type {string}
   */
  renduDynamique: string = "";
  /**
   * Message indiquant l'√©tat de l'ami.
   *
   * @type {string}
   */
  ami: string = 'Aucun Ami';
  /**
   * Cr√©e une instance de ListFriendsComponent.
   * Apr√®s un d√©lai de 3 secondes, la propri√©t√© 'reputation' est mise √† true.
   */
  constructor() {
    setTimeout(() => {
      this.reputation = true;
    }, 3000);
  }
  /**
   * Met √† jour le rendu dynamique avec la valeur saisie par l'utilisateur.
   *
   * @param {any} eventInput - L'√©v√©nement √©mis lors de la saisie dans l'input.
   * @returns {void}
   */
  onUpdateFriendsList(eventInput: any): void {
    this.renduDynamique = eventInput.target.value;
  }
  /**
   * Met √† jour la propri√©t√© 'ami' pour indiquer qu'un ami a √©t√© ajout√© avec succ√®s.
   *
   * @returns {void}
   */
  ajouterAmi(): void {
    this.ami = 'Ami Ajouter Avec Succ√®s : ' + this.renduDynamique;
  }
}



/* Dans le composant List-Friends: 

Rajouter un Input texte : 
En captant l'event il faudra afficher ce qui est tap√© dans l'input, dans un <p>

Rajouter : un variable 
qui affiche "Aucun ami"

Rajouter un bouton  : 
Quand on click sur le bouton cela change le texte de la variable en "Ami ajout√©" 
On affiche ce qui est tap√© dans l'input en passant par l'event */


// PARTIE CORRECTION DE JEFF : 

/* import { Component } from '@angular/core';
import { OneFriendEventBindingComponent } from '../one-friend-event-binding/one-friend-event-binding.component';
import { OneFriendDynamicStylingComponent } from "../one-friend-dynamic-styling/one-friend-dynamic-styling.component";
@Component({
  selector: 'app-list-friends-event-binding',
  imports: [OneFriendEventBindingComponent],
  // imports: [OneFriendEventBindingComponent, OneFriendDynamicStylingComponent],
  templateUrl: './list-friends-event-binding.component.html',
  styleUrl: './list-friends-event-binding.component.css'
})
export class ListFriendsEventBindingComponent {
  listFriendsAuth:boolean=false;
  listFriendsCreationStatus:string="ü•∂ Aucun ami ..."
  listFriendsInputText:string=""
  constructor(){
    // setTimeout(() => {
    //   this.listFriendsAuth = true;
    // }, 10000);
  }

  onAddingFriends():void{
    this.listFriendsCreationStatus="ü•≥ Votre ami a √©t√© ajout√© !"
  }
  onUpdateFriendsList(eventInput:any):void{
    console.log(eventInput);
    console.log(eventInput.target.value);
    // console.log((<HTMLInputElement>eventInput.target).value);
    this.listFriendsInputText = (<HTMLInputElement>eventInput.target).value;
    //! autre syntaxe de typage avec as
    // this.listFriendsInputText = (eventInput.target as HTMLInputElement).value;

  }
} 
  // PR√âF√âRER NGMODEL!! https://angular.fr/forms/ng-model
 <textarea [(ngModel)]="avis" name="avis"></textarea>
export class FormComponent {
  nom: string = '';
  email: string = '';
  avis: string = '';

  onSubmit() {
    console.log(`Nom: ${this.nom}`);
    console.log(`Email: ${this.email}`);
    console.log(`Avis: ${this.avis}`);
    //Ici on peut envoyer les donn√©es √† un service ou √† une API
  }
}

 */